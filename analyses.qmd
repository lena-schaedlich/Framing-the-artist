---
title: "analyses"
format: html
---

## Libraries and settings required for analysis
```{r setup}
library(tidyverse)

library(binom)
library(caret)
library(cmdstanr)
library(glue)
library(kilter) # devtools::install_github("alexander-pastukhov/kilter", dependencies=TRUE)
library(patchwork)
```


## Data import

Definitions
```{r}
artists <- c("B" = "Bodett", "H" = "Hammer", "L" = "Lohse-Wächter", "W" = "Wölfli")

conditions_df <-
  bind_rows(
    tibble(Condition = 1,
           Artist = c("Bodett", "Hammer", "Lohse-Wächter", "Wölfli"),
           Presentation = c("schizophrenic", "schizophrenic", "neutral", "neutral")),
    tibble(Condition = 2,
           Artist = c("Bodett", "Hammer", "Lohse-Wächter", "Wölfli"),
           Presentation = c("schizophrenic", "neutral", "schizophrenic", "neutral")),
    tibble(Condition = 3,
           Artist = c("Bodett", "Hammer", "Lohse-Wächter", "Wölfli"),
           Presentation = c("schizophrenic", "neutral", "neutral", "schizophrenic")),
    tibble(Condition = 4,
           Artist = c("Bodett", "Hammer", "Lohse-Wächter", "Wölfli"),
           Presentation = c("neutral", "schizophrenic", "schizophrenic", "neutral")),
    tibble(Condition = 5,
           Artist = c("Bodett", "Hammer", "Lohse-Wächter", "Wölfli"),
           Presentation = c("neutral", "schizophrenic", "neutral", "schizophrenic")),
    tibble(Condition = 6,
           Artist = c("Bodett", "Hammer", "Lohse-Wächter", "Wölfli"),
           Presentation = c("neutral", "neutral", "schizophrenic", "schizophrenic"))
  ) |>
  mutate(Artist = factor(Artist, levels = artists),
         Presentation = factor(Presentation, levels = c("neutral", "schizophrenic")))

aesthemos_questions_de = c(
  "schön", "intellektuell", "erfreut", "beruhigt", "neugierig",
  "gefallen", "faszinieren", "wunderbar", "belebend", "geistig gefordert",
  "verblüffend", "hässlich", "tieferer Sinn", "ergriffen", "melancholisch",
  "energetisiert", "ärgerlich", "verzaubert", "langweilig", "entspannend",
  "Einsicht", "amüsant", "traurig", "verwirrt", "aggressiv",
  "sentimale Gefühle", "beunruhigend", "nostalgisch", "überraschend", "beklemmend",
  "erhaben", "beflügelnd", "gleichgültig", "beeindruckt", "geschmackslos",
  "berührend", "verstörend", "interesse", "glücklich", "ehrfurcht",
  "Tatendrang", "belustigend"
)

aesthemos_questions_en <- c(
  "feeling of beauty/liking", "intellectual challenge", "joy", "relaxation", "interest",
  "feeling of beauty/liking", "fascination", "enchantment", "vitality", "intellectual challenge",
  "suprise", "feeling of ugliness", "insight", "being moved", "sadness",
  "energy", "anger", "enchantment", "boredom", "relaxation",
  "insight", "humor", "sadness", "confusion", "anger",
  "nostalgia", "uneasiness", "nostalgia", "suprise", "uneasiness",
  "awe", "vitality", "boredom", "fascination", "feeling of ugliness",
  "being moved", "confusion", "interest", "joy", "awe",
  "energy", "humor"
)

aesthemos_emotion <- tibble(
  Emotion = c(
    "Feeling of beauty/liking", "Feeling of beauty/liking",
    "Intellectual challenge", "Intellectual challenge",
    "Joy", "Joy",
    "Relaxation", "Relaxation",
    "Interest", "Interest",
    "Fascination", "Fascination",
    "Enchantment", "Enchantment",
    "Vitality", "Vitality",
    "Surprise", "Surprise",
    "Feeling of ugliness", "Feeling of ugliness",
    "Insight", "Insight",
    "Being moved", "Being moved",
    "Sadness", "Sadness",
    "Energy", "Energy",
    "Anger", "Anger",
    "Boredom", "Boredom",
    "Humor", "Humor",
    "Confusion", "Confusion",
    "Nostalgia", "Nostalgia",
    "Uneasiness", "Uneasiness",
    "Awe", "Awe"
  ),
  iQuestion = c(
    1, 6,
    2, 10,
    3, 39,
    4, 20,
    5, 38,
    7, 34,
    8, 18,
    9, 32,
    11, 29,
    12, 35,
    13, 21,
    14, 36,
    15, 23,
    16, 41,
    17, 25,
    19, 33,
    22, 42,
    24, 37,
    26, 28,
    27, 30,
    31, 40
  )
) |>
  mutate(Emotion = fct_inorder(factor(Emotion)))

aesthetics_dimension <- tibble(
  Dimension = c(
    "Aura", "Want to get to know artist",
    "Expressive", "Aesthetic",
    "Fascinating Style", "Present",
    "Reflecting Life", "Reflecting Person",
    "Immerse in Artwork", "Quality",
    "Originality", "Uniqueness",
    "Creativity", "Intense Emotions",
    "Artist's biography reflected", "Wanting to have the artwork"
  ),
  jQuestion = c(
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
  )
) |>
  mutate(Dimension = fct_inorder(factor(Dimension)))

filename <- fs::dir_ls("data/", glob="*.csv")
col_names <- names(read_csv(filename, n_max = 0))
```


## Import data
```{r}
# create list for specifying the column structure
type_list <- map(col_names, function(name) {
  if (grepl("^(B|H|L|W)001", name)) {
    col_integer()
  } 
  else if (grepl("^(B|H|L|W)002", name)) {
    col_integer()
  }
  else if (grepl("^(SB|SH|SL|SW)0", name)) {
    col_integer()
  }
  else if (grepl("^(SI|SM)01", name)) {
    col_integer()
  }
  else if (grepl("^(S006|S007)", name)) {
    col_integer()
  }
  else if (grepl("^EV04_", name)) {
    col_integer()
  }
  else if (grepl("^KE01", name)) {
    col_integer()
  }
  else if (name == "KE03") {
    col_integer()
  }
  else if (name == "RA01") {
    col_integer()
  }
  else if (name == "SD01") {
    col_integer()
  }
  else if (name == "SD02_01") {
    col_integer()
  }
  else if (name == "SD11") {
    col_integer()
  }
  else if (name == "SD17") {
    col_integer()
  }
  else if (name == "CASE") {
    col_integer()
  }
  else if (name == "SD15_01") {
    col_character()
  }
  else if (name == "SD15_01a") {
    col_integer()
  }
  else if (name == "SD02_01") {
    col_integer()
  }
  else {
    col_skip()
  }
})

results <-   
  read_csv(filename, col_types = do.call(cols, type_list)) |>
  # turning selected (sozio-demographic) variables into factors or Boolean
  mutate(across(matches("^KE01"), ~ factor(.x, levels = c("1", "2", "3", "4", "5"), ordered = TRUE)), # prior art experience/knowledge
         SD11 = factor(SD11, levels = c("1", "3", "4", "5", "6", "7", "8", "9", "10"), labels = c("ohne Abschluss", "Quali", "Mittlere Reife", "abgeschlossene Lehre", "Fachabitur", "Abitur", "Hochschulabschluss", "Schüler", "anderer Abschluss")), # education
         SD01 = factor(SD01, levels = c("1", "2", "3", "4"), labels = c("female", "male", "other", "no entry")), # gender
         across(matches("^EV04_"), ~ ifelse(.x == 2, TRUE, FALSE)), # artwork known
         SD17 = ifelse(SD17 == 2, TRUE, FALSE), # normal color vision
         SD15_01a = ifelse(SD15_01a == 1, TRUE, FALSE),
         KE03 = ifelse(KE03 == 1, TRUE, FALSE)) # doing arts themselves
```

## sozio-demographic data
```{r sozio-demographic}
soz_dem <- results |>
  select(SD02_01, SD01, SD11, SD15_01, SD15_01a, KE01_01, KE01_02, KE01_03, KE01_04, KE03)|>
  rename(age = SD02_01, gender = SD01, education = SD11, job = SD15_01, art_meaning = KE01_01, art_knowledge = KE01_02, art_independence = KE01_03, artist_fascination = KE01_04, doing_art = KE03)

# age: mean and sd 
mean_age <- soz_dem|>
  summarize(mean_age = mean(age),
            sd_age = sd(age))
# age per gender
age <- soz_dem|>
  group_by(gender)|>
  summarize(n = n(),
            mean_age = mean(age),
            min_age = min(age),
            max_age = max(age))|>
  mutate(overall_age = mean(soz_dem[["age"]]))


# education
edu <- soz_dem|>
  group_by(education)|>
  summarize(n = n())


# prior art experience/knowledge
doing_art <-
  soz_dem|>
  group_by(doing_art)|>
  summarize(n = n(),
            .groups = "drop")|>
  mutate(Proportion = n/sum(n))

art_q <- c("art_independence", "art_knowledge", "art_meaning", "artist_fascination")
art <- soz_dem|>
  select(art_q)|>
  tidyr::pivot_longer(
    cols=art_q, names_to = "Scale", values_to = "Response")|>
  group_by(Scale, Response)|>
  summarise(n = n(),
            .groups = "drop")|>
  group_by(Scale)|>
  mutate(Proportion = n/sum(n))


ggplot(art, aes(x = as.integer(Response), y = Proportion, color = Scale,  fill = Scale)) + 
  geom_point() +
  geom_line() +
  scale_fill_manual(values = c("#FF3300", "#E04BA0", "#9E56EC","#5959FF"))+
  scale_color_manual(values = c("#FF3300", "#E04BA0", "#9E56EC","#5959FF"))+
  labs(x = "Response")+
  scale_x_continuous()
ggsave("Figures/prior-art-exp.png", units = "cm", width = 16, height = 8)
```


## Aesthemos

### Extracting questions and adding information on emotions
```{r}
aesthemos_df <-
  results |>
  select(CASE, RA01, matches("^(B|H|L|W)001")) |>
  pivot_longer(matches("^(B|H|L|W)001"), names_to = "Question", values_to = "Response") |>
  mutate(Artist = factor(str_sub(Question, 1, 1), levels = names(artists), labels = artists),
         iQuestion = as.integer(str_extract(Question, "\\d{2}$")),
         Question = factor(iQuestion, labels = aesthemos_questions_en),
         Response = factor(Response, levels = 1:5)) |>
  left_join(conditions_df, by = c("RA01" = "Condition", "Artist" = "Artist")) |>
  left_join(aesthemos_emotion, by = c("iQuestion"))
```

### Plotting distribution of responses
```{r}
aesthemos_behavior <- kilter::bootstrap_response_counts(aesthemos_df, Response ~ Artist + Presentation + Emotion, R = 100)
for(emotion in unique(aesthemos_emotion$Emotion)) {
  emotion_plots <- list()
  
  for(artist in artists) {
    emotion_plots[[artist]] <-
      aesthemos_behavior |>
      filter(Artist == artist, Emotion == emotion) |>
      kilter::plot_responses(x = Response, y = P, ymin = LowerCI, ymax = UpperCI, color = Presentation) +
      labs(subtitle = artist)
    
    if (artist != artists[4]) emotion_plots[[artist]]<- emotion_plots[[artist]] + theme(legend.position = "none")
  }

  patchwork::wrap_plots(emotion_plots) + patchwork::plot_annotation(title = emotion)
  ggsave(glue("Figures/behavior/aesthemos/{str_replace_all(emotion, '/', ' ')}.png"), units = "cm", width = 24, height = 12)
}
```

### Bayesian models
```{r}
model_names <- c("artist-and-condition")
models <- purrr::map(model_names, ~cmdstan_model(glue("Stan/{.}.stan")))
names(models) <- model_names

stan_data <- list(
  N = nrow(aesthemos_df),
  ArtistsN = nlevels(aesthemos_df$Artist),
  EmotionsN = nlevels(aesthemos_df$Emotion),
  PresentationsN = nlevels(aesthemos_df$Presentation),
  MaxResponse = nlevels(aesthemos_df$Response),
  
  Response = as.integer(aesthemos_df$Response),
  Artist = as.integer(aesthemos_df$Artist),
  Emotion = as.integer(aesthemos_df$Emotion),
  Presentation = as.integer(aesthemos_df$Presentation)
)

aesthemos_fit <- models[["artist-and-condition"]]$sample(stan_data, chains  = 4, parallel_chains = future::availableCores())
aesthemos_draws <- aesthemos_fit$draws(format = "df") |> as_tibble()
saveRDS(aesthemos_draws, 'aesthemos_draws.RDS')
```

### Plotting posterior distributions for responses
```{r}
aesthemos_draws <- readRDS("aesthemos_draws.RDS")
eta <- kilter::parse_stan_posterior_array(aesthemos_draws, "eta", list("Artist" = levels(aesthemos_df$Artist), "Emotion" = levels(aesthemos_df$Emotion), "Presentation" = levels(aesthemos_df$Presentation)), "eta") |>
  mutate(eta = kilter::inv_logit(eta))

emotion <- levels(aesthemos_df$Emotion)[3]
eta |>
  filter(Emotion == emotion) |>
ggplot(aes(x = Presentation, y = kilter::inv_logit(eta), fill = Presentation)) +
  geom_violin(alpha = 0.75, show.legend = FALSE) +
  facet_wrap(. ~ Artist) +
  scale_fill_manual(values = c("neutral" = "#FF3300", "schizophrenic" = "#5959FF")) +
  labs(title = emotion)


for(artist in levels(aesthemos_df$Artist)){
  presentation_difference <-
    eta |>
    pivot_wider(names_from = Presentation, values_from = eta) |>
    mutate(Difference = schizophrenic - neutral) |>
    group_by(Artist, Emotion) |>
    summarise(Avg = mean(Difference),
              LowerCI = kilter::lower_ci(Difference),
              UpperCI = kilter::upper_ci(Difference),
              P = ifelse(sign(median(Difference)) > 0, mean(Difference > 0),mean(Difference < 0)),
              .groups = "drop") |>
    mutate(Info = sprintf("%s\nS-N=%.2f [%.2f,%.2f]\nP=%.1f%%", Emotion, Avg, LowerCI, UpperCI, 100 * P))
  
  artist_df <- filter(eta, Artist == artist)
  artist_presentation <- filter(presentation_difference, Artist == artist)
  artist_facets <- artist_presentation$Info
  names(artist_facets) <- artist_presentation$Emotion
  
  
  ggplot(left_join(artist_df, artist_presentation |> select(Emotion, P), by = "Emotion"), aes(x = Presentation, y = eta, fill = Presentation)) +
    geom_violin(show.legend = FALSE, aes(alpha = P > 0.90)) +
    facet_wrap(. ~ Emotion, labeller = labeller(Emotion = artist_facets)) +
    scale_fill_manual(values = c("neutral" = "#FF3300", "schizophrenic" = "#5959FF")) +
    labs(title = artist)
  
  
  ggsave(glue("Figures/aesthemos/response-aesthemos-{artist}.png"), units = "cm", width = 32, height = 24)
}
```



## Self-constructed Aesthetics Items

### Extracting questions and adding information on emotions
```{r}
aesthetics_df <-
  results |>
  select(CASE, RA01, matches("^(B|H|L|W)002")) |>
  pivot_longer(matches("^(B|H|L|W)002"), names_to = "Question", values_to = "Response") |>
  mutate(Artist = factor(str_sub(Question, 1, 1), levels = names(artists), labels = artists),
         jQuestion = as.integer(str_extract(Question, "\\d{2}$")),
         Question = factor(jQuestion, labels = aesthetics_dimension[["Dimension"]]),
         Response = factor(Response, levels = 1:5)) |>
  left_join(conditions_df, by = c("RA01" = "Condition", "Artist" = "Artist")) |>
  left_join(aesthetics_dimension, by = c("jQuestion"))
```

### Plotting distribution of responses
```{r}
aesthetics_behavior <- kilter::bootstrap_response_counts(aesthetics_df, Response ~ Artist + Presentation + Dimension, R = 100)
for(dimension in unique(aesthetics_dimension$Dimension)) {
  aesthetics_plots <- list()
  
  for(artist in artists) {
    aesthetics_plots[[artist]] <-
      aesthetics_behavior |>
      filter(Artist == artist, Dimension == dimension) |>
      kilter::plot_responses(x = Response, y = P, ymin = LowerCI, ymax = UpperCI, color = Presentation) +
      labs(subtitle = artist)
    
    if (artist != artists[4]) aesthetics_plots[[artist]] <- aesthetics_plots[[artist]] + theme(legend.position = "none")
  }

  patchwork::wrap_plots(aesthetics_plots) + patchwork::plot_annotation(title = dimension)
  ggsave(glue("Figures/behavior/aesthetics/{str_replace_all(dimension, '/', ' ')}.png"), units = "cm", width = 24, height = 12)
}
```

### Bayesian models
```{r}
model_names <- c("artist-and-condition")
models <- purrr::map(model_names, ~cmdstan_model(glue("Stan/{.}.stan")))
names(models) <- model_names

stan_data <- list(
  N = nrow(aesthetics_df),
  ArtistsN = nlevels(aesthetics_df$Artist),
  EmotionsN = nlevels(aesthetics_df$Dimension),
  PresentationsN = nlevels(aesthetics_df$Presentation),
  MaxResponse = nlevels(aesthetics_df$Response),
  
  Response = as.integer(aesthetics_df$Response),
  Artist = as.integer(aesthetics_df$Artist),
  Emotion = as.integer(aesthetics_df$Dimension),
  Presentation = as.integer(aesthetics_df$Presentation)
)

aesthetics_fit <- models[["artist-and-condition"]]$sample(stan_data, chains  = 4, parallel_chains = future::availableCores())
aesthetics_draws <- aesthetics_fit$draws(format = "df") |> as_tibble()
saveRDS(aesthetics_draws, 'aesthetics_draws.RDS')
```

### Plotting posterior distributions for responses
```{r}
aesthetics_draws <- readRDS("aesthetics_draws.RDS")
eta <- kilter::parse_stan_posterior_array(aesthetics_draws, "eta", list("Artist" = levels(aesthetics_df$Artist), "Dimension" = levels(aesthetics_df$Dimension), "Presentation" = levels(aesthetics_df$Presentation)), "eta") |>
  mutate(eta = kilter::inv_logit(eta))

dimension <- levels(aesthetics_df$Dimension)[3]
eta |>
  filter(Dimension == dimension) |>
ggplot(aes(x = Presentation, y = kilter::inv_logit(eta), fill = Presentation)) +
  geom_violin(alpha = 0.75, show.legend = FALSE) +
  facet_wrap(. ~ Artist) +
  scale_fill_manual(values = c("neutral" = "#FF3300", "schizophrenic" = "#5959FF")) +
  labs(title = dimension)


for(artist in levels(aesthetics_df$Artist)){
  presentation_difference <-
    eta |>
    pivot_wider(names_from = Presentation, values_from = eta) |>
    mutate(Difference = schizophrenic - neutral) |>
    group_by(Artist, Dimension) |>
    summarise(Avg = mean(Difference),
              LowerCI = kilter::lower_ci(Difference),
              UpperCI = kilter::upper_ci(Difference),
              P = ifelse(sign(median(Difference)) > 0, mean(Difference > 0),mean(Difference < 0)),
              .groups = "drop") |>
    mutate(Info = sprintf("%s\nS-N=%.2f [%.2f,%.2f]\nP=%.1f%%", Dimension, Avg, LowerCI, UpperCI, 100 * P))
  
  artist_df <- filter(eta, Artist == artist)
  artist_presentation <- filter(presentation_difference, Artist == artist)
  artist_facets <- artist_presentation$Info
  names(artist_facets) <- artist_presentation$Dimension
  
  
     
  ggplot(left_join(artist_df, artist_presentation |> select(Dimension, P), by = "Dimension"), aes(x = Presentation, y = eta, fill = Presentation)) +
    geom_violin(show.legend = FALSE, aes(alpha = P >0.90)) +
    facet_wrap(. ~ Dimension, labeller = labeller(Dimension = artist_facets)) +
    scale_fill_manual(values = c("neutral" = "#FF3300", "schizophrenic" = "#5959FF")) +
    labs(title = artist)
  
  
  ggsave(glue("Figures/aesthetics/response-aesthetics-{artist}.png"), units = "cm", width = 32, height = 24)
}
```



## ML inverse approach: predict condition from responses

Preparing a wide table with one row per artist for each participants (i.e., each participant gets four rows)
```{r}
responses_wide <-
  results |>
  select(CASE, RA01, matches("^(B|H|L|W)00")) |>
  select(where(~ !is.character(.))) |>
  pivot_longer(matches("^(B|H|L|W)00"), names_to = "Question", values_to = "Response") |>
  mutate(Artist = factor(str_sub(Question, 1, 1), levels = names(artists), labels = artists),
         Question = str_sub(Question, 2)) |>
  pivot_wider(names_from = Question, values_from = Response) |>
  left_join(conditions_df, by = c("RA01" = "Condition", "Artist" = "Artist")) |>
  select(-RA01) |>
  relocate(CASE, Artist, Presentation)
```

Fitting random forest using leave-one out cross validation
```{r}
# 10-fold cross-validation repeated ten times
fitControl <- trainControl(method = "repeatedcv",
                           number = 10,
                           repeats = 10)

# predict presentation from all responses and 
ml_fit <- train(Presentation ~ .,
                data = select(responses_wide, -CASE), 
                method = 'rf',
                trControl = trainControl(method = "LOOCV", savePredictions = "final"))

correctly_predicted <- ml_fit$pred$pred == ml_fit$pred$obs
cat(sprintf("LOO CV performance: %.2f [%.2f, %.2f]", mean(correctly_predicted), binom::binom.exact(sum(correctly_predicted), length(correctly_predicted))$lower, binom::binom.exact(sum(correctly_predicted), length(correctly_predicted))$upper))
```

Variable importance
```{r}
varImp(ml_fit)
```